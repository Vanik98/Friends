// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.friends.di;

import android.content.SharedPreferences;
import com.example.friends.base.BaseActivity;
import com.example.friends.di.component.ActivityComponent;
import com.example.friends.di.component.ApplicationComponent;
import com.example.friends.di.module.ActivityModule;
import com.example.friends.di.module.FirbaseModule;
import com.example.friends.di.module.MainModule;
import com.example.friends.di.module.SaveDataModel;
import com.example.friends.firebase.MyFirebase;
import com.example.friends.mainactivty.MainActivity;
import com.example.friends.mainactivty.MainActivity_MembersInjector;
import com.example.friends.mainactivty.MainScreenContract;
import com.example.friends.savedata.MySheradPreferans;
import com.example.friends.ui.MainActivityUI;
import dagger.MembersInjector;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerActivityComponent implements ActivityComponent {
  private Provider<MainActivityUI> provideMainUIProvider;

  private Provider<BaseActivity> provideActivityProvider;

  private Provider<MyFirebase> provideFirebaseProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<MySheradPreferans> provideMySheradPreferansProvider;

  private Provider<MainScreenContract.MainModel> provideMainModelProvider;

  private Provider<MainScreenContract.MainPresenter> provideMainPresenterProvider;

  private MembersInjector<MainActivity> mainActivityMembersInjector;

  private DaggerActivityComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideMainUIProvider = MainModule_ProvideMainUIFactory.create(builder.mainModule);

    this.provideActivityProvider =
        ActivityModule_ProvideActivityFactory.create(builder.activityModule);

    this.provideFirebaseProvider =
        FirbaseModule_ProvideFirebaseFactory.create(builder.firbaseModule, provideActivityProvider);

    this.provideSharedPreferencesProvider =
        SaveDataModel_ProvideSharedPreferencesFactory.create(
            builder.saveDataModel, provideActivityProvider);

    this.provideMySheradPreferansProvider =
        SaveDataModel_ProvideMySheradPreferansFactory.create(
            builder.saveDataModel, provideSharedPreferencesProvider);

    this.provideMainModelProvider =
        MainModule_ProvideMainModelFactory.create(
            builder.mainModule, provideFirebaseProvider, provideMySheradPreferansProvider);

    this.provideMainPresenterProvider =
        MainModule_ProvideMainPresenterFactory.create(builder.mainModule, provideMainModelProvider);

    this.mainActivityMembersInjector =
        MainActivity_MembersInjector.create(provideMainUIProvider, provideMainPresenterProvider);
  }

  @Override
  public void inject(MainActivity activity) {
    mainActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private MainModule mainModule;

    private ActivityModule activityModule;

    private FirbaseModule firbaseModule;

    private SaveDataModel saveDataModel;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public ActivityComponent build() {
      if (mainModule == null) {
        this.mainModule = new MainModule();
      }
      if (activityModule == null) {
        throw new IllegalStateException(ActivityModule.class.getCanonicalName() + " must be set");
      }
      if (firbaseModule == null) {
        this.firbaseModule = new FirbaseModule();
      }
      if (saveDataModel == null) {
        this.saveDataModel = new SaveDataModel();
      }
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerActivityComponent(this);
    }

    public Builder activityModule(ActivityModule activityModule) {
      this.activityModule = Preconditions.checkNotNull(activityModule);
      return this;
    }

    public Builder mainModule(MainModule mainModule) {
      this.mainModule = Preconditions.checkNotNull(mainModule);
      return this;
    }

    public Builder saveDataModel(SaveDataModel saveDataModel) {
      this.saveDataModel = Preconditions.checkNotNull(saveDataModel);
      return this;
    }

    public Builder firbaseModule(FirbaseModule firbaseModule) {
      this.firbaseModule = Preconditions.checkNotNull(firbaseModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }
}
