// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.friends.di;

import com.example.friends.firebase.MyFirebase;
import com.example.friends.mainactivty.MainScreenContract;
import com.example.friends.savedata.MySheradPreferans;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class MainModule_ProvideMainModelFactory
    implements Factory<MainScreenContract.MainModel> {
  private final MainModule module;

  private final Provider<MyFirebase> firebaseProvider;

  private final Provider<MySheradPreferans> msPrefProvider;

  public MainModule_ProvideMainModelFactory(
      MainModule module,
      Provider<MyFirebase> firebaseProvider,
      Provider<MySheradPreferans> msPrefProvider) {
    assert module != null;
    this.module = module;
    assert firebaseProvider != null;
    this.firebaseProvider = firebaseProvider;
    assert msPrefProvider != null;
    this.msPrefProvider = msPrefProvider;
  }

  @Override
  public MainScreenContract.MainModel get() {
    return Preconditions.checkNotNull(
        module.provideMainModel(firebaseProvider.get(), msPrefProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<MainScreenContract.MainModel> create(
      MainModule module,
      Provider<MyFirebase> firebaseProvider,
      Provider<MySheradPreferans> msPrefProvider) {
    return new MainModule_ProvideMainModelFactory(module, firebaseProvider, msPrefProvider);
  }
}
