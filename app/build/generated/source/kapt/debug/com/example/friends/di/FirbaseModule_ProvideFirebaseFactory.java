// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.friends.di;

import com.example.friends.base.BaseActivity;
import com.example.friends.firebase.MyFirebase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class FirbaseModule_ProvideFirebaseFactory implements Factory<MyFirebase> {
  private final FirbaseModule module;

  private final Provider<BaseActivity> activityProvider;

  public FirbaseModule_ProvideFirebaseFactory(
      FirbaseModule module, Provider<BaseActivity> activityProvider) {
    assert module != null;
    this.module = module;
    assert activityProvider != null;
    this.activityProvider = activityProvider;
  }

  @Override
  public MyFirebase get() {
    return Preconditions.checkNotNull(
        module.provideFirebase(activityProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<MyFirebase> create(
      FirbaseModule module, Provider<BaseActivity> activityProvider) {
    return new FirbaseModule_ProvideFirebaseFactory(module, activityProvider);
  }
}
